#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case, non_upper_case_globals, unused_assignments, unused_mut)]
#![feature(extern_types)]
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    fn fnmatch(
        __pattern: *const libc::c_char,
        __name: *const libc::c_char,
        __flags: libc::c_int,
    ) -> libc::c_int;
    fn getopt_long(
        ___argc: libc::c_int,
        ___argv: *const *mut libc::c_char,
        __shortopts: *const libc::c_char,
        __longopts: *const option,
        __longind: *mut libc::c_int,
    ) -> libc::c_int;
    static mut optind: libc::c_int;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn atexit(__func: Option::<unsafe extern "C" fn() -> ()>) -> libc::c_int;
    fn exit(_: libc::c_int) -> !;
    fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn free(_: *mut libc::c_void);
    fn __errno_location() -> *mut libc::c_int;
    static mut Version: *const libc::c_char;
    fn __ctype_b_loc() -> *mut *const libc::c_ushort;
    fn setlocale(
        __category: libc::c_int,
        __locale: *const libc::c_char,
    ) -> *mut libc::c_char;
    fn dcgettext(
        __domainname: *const libc::c_char,
        __msgid: *const libc::c_char,
        __category: libc::c_int,
    ) -> *mut libc::c_char;
    fn textdomain(__domainname: *const libc::c_char) -> *mut libc::c_char;
    fn bindtextdomain(
        __domainname: *const libc::c_char,
        __dirname: *const libc::c_char,
    ) -> *mut libc::c_char;
    fn ximemdup0(p: *const libc::c_void, s: idx_t) -> *mut libc::c_char;
    static mut stdin: *mut FILE;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn __overflow(_: *mut FILE, _: libc::c_int) -> libc::c_int;
    fn __getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut size_t,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
    fn puts(__s: *const libc::c_char) -> libc::c_int;
    fn fputs_unlocked(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
    fn fwrite_unlocked(
        __ptr: *const libc::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
    fn rpl_fclose(stream: *mut FILE) -> libc::c_int;
    fn last_component(filename: *const libc::c_char) -> *mut libc::c_char;
    fn close_stdout();
    fn version_etc(
        stream: *mut FILE,
        command_name: *const libc::c_char,
        package: *const libc::c_char,
        version: *const libc::c_char,
        _: ...
    );
    static mut program_name: *const libc::c_char;
    fn set_program_name(argv0: *const libc::c_char);
    fn quotearg_n_style_colon(
        n: libc::c_int,
        s: quoting_style,
        arg: *const libc::c_char,
    ) -> *mut libc::c_char;
    fn c_strcasecmp(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_int;
    fn error(
        __status: libc::c_int,
        __errnum: libc::c_int,
        __format: *const libc::c_char,
        _: ...
    );
    fn _obstack_newchunk(_: *mut obstack, _: size_t);
    fn _obstack_begin(
        _: *mut obstack,
        _: size_t,
        _: size_t,
        _: Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void>,
        _: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    ) -> libc::c_int;
    fn quote(arg: *const libc::c_char) -> *const libc::c_char;
    fn freopen_safer(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: *mut FILE,
    ) -> *mut FILE;
}
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct option {
    pub name: *const libc::c_char,
    pub has_arg: libc::c_int,
    pub flag: *mut libc::c_int,
    pub val: libc::c_int,
}
pub type ptrdiff_t = libc::c_long;
pub type C2RustUnnamed = libc::c_uint;
pub const _ISalnum: C2RustUnnamed = 8;
pub const _ISpunct: C2RustUnnamed = 4;
pub const _IScntrl: C2RustUnnamed = 2;
pub const _ISblank: C2RustUnnamed = 1;
pub const _ISgraph: C2RustUnnamed = 32768;
pub const _ISprint: C2RustUnnamed = 16384;
pub const _ISspace: C2RustUnnamed = 8192;
pub const _ISxdigit: C2RustUnnamed = 4096;
pub const _ISdigit: C2RustUnnamed = 2048;
pub const _ISalpha: C2RustUnnamed = 1024;
pub const _ISlower: C2RustUnnamed = 512;
pub const _ISupper: C2RustUnnamed = 256;
pub type idx_t = ptrdiff_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct obstack {
    pub chunk_size: size_t,
    pub chunk: *mut _obstack_chunk,
    pub object_base: *mut libc::c_char,
    pub next_free: *mut libc::c_char,
    pub chunk_limit: *mut libc::c_char,
    pub temp: C2RustUnnamed_2,
    pub alignment_mask: size_t,
    pub chunkfun: C2RustUnnamed_1,
    pub freefun: C2RustUnnamed_0,
    pub extra_arg: *mut libc::c_void,
    #[bitfield(name = "use_extra_arg", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "maybe_empty_object", ty = "libc::c_uint", bits = "1..=1")]
    #[bitfield(name = "alloc_failed", ty = "libc::c_uint", bits = "2..=2")]
    pub use_extra_arg_maybe_empty_object_alloc_failed: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_0 {
    pub plain: Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>,
    pub extra: Option::<
        unsafe extern "C" fn(*mut libc::c_void, *mut libc::c_void) -> (),
    >,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_1 {
    pub plain: Option::<unsafe extern "C" fn(size_t) -> *mut libc::c_void>,
    pub extra: Option::<
        unsafe extern "C" fn(*mut libc::c_void, size_t) -> *mut libc::c_void,
    >,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_2 {
    pub i: size_t,
    pub p: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _obstack_chunk {
    pub limit: *mut libc::c_char,
    pub prev: *mut _obstack_chunk,
    pub contents: [libc::c_char; 0],
}
pub type C2RustUnnamed_3 = libc::c_int;
pub const GETOPT_VERSION_CHAR: C2RustUnnamed_3 = -3;
pub const GETOPT_HELP_CHAR: C2RustUnnamed_3 = -2;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct infomap {
    pub program: *const libc::c_char,
    pub node: *const libc::c_char,
}
pub type quoting_style = libc::c_uint;
pub const custom_quoting_style: quoting_style = 10;
pub const clocale_quoting_style: quoting_style = 9;
pub const locale_quoting_style: quoting_style = 8;
pub const escape_quoting_style: quoting_style = 7;
pub const c_maybe_quoting_style: quoting_style = 6;
pub const c_quoting_style: quoting_style = 5;
pub const shell_escape_always_quoting_style: quoting_style = 4;
pub const shell_escape_quoting_style: quoting_style = 3;
pub const shell_always_quoting_style: quoting_style = 2;
pub const shell_quoting_style: quoting_style = 1;
pub const literal_quoting_style: quoting_style = 0;
pub type Shell_syntax = libc::c_uint;
pub const SHELL_SYNTAX_UNKNOWN: Shell_syntax = 2;
pub const SHELL_SYNTAX_C: Shell_syntax = 1;
pub const SHELL_SYNTAX_BOURNE: Shell_syntax = 0;
pub type C2RustUnnamed_4 = libc::c_uint;
pub const PRINT_LS_COLORS_OPTION: C2RustUnnamed_4 = 256;
pub const ST_TERMYES: C2RustUnnamed_5 = 1;
pub type C2RustUnnamed_5 = libc::c_uint;
pub const ST_GLOBAL: C2RustUnnamed_5 = 3;
pub const ST_TERMSURE: C2RustUnnamed_5 = 2;
pub const ST_TERMNO: C2RustUnnamed_5 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub _gl_dummy: libc::c_int,
}
#[inline]
unsafe extern "C" fn to_uchar(mut ch: libc::c_char) -> libc::c_uchar {
    return ch as libc::c_uchar;
}
#[inline]
unsafe extern "C" fn putc_unlocked(
    mut __c: libc::c_int,
    mut __stream: *mut FILE,
) -> libc::c_int {
    return if ((*__stream)._IO_write_ptr >= (*__stream)._IO_write_end) as libc::c_int
        as libc::c_long != 0
    {
        __overflow(__stream, __c as libc::c_uchar as libc::c_int)
    } else {
        let fresh0 = (*__stream)._IO_write_ptr;
        (*__stream)._IO_write_ptr = ((*__stream)._IO_write_ptr).offset(1);
        *fresh0 = __c as libc::c_char;
        *fresh0 as libc::c_uchar as libc::c_int
    };
}
#[inline]
unsafe extern "C" fn getline(
    mut __lineptr: *mut *mut libc::c_char,
    mut __n: *mut size_t,
    mut __stream: *mut FILE,
) -> __ssize_t {
    return __getdelim(__lineptr, __n, '\n' as i32, __stream);
}
#[inline]
unsafe extern "C" fn emit_ancillary_info(mut program: *const libc::c_char) {
    let infomap_0: [infomap; 7] = [
        {
            let mut init = infomap {
                program: b"[\0" as *const u8 as *const libc::c_char,
                node: b"test invocation\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: b"coreutils\0" as *const u8 as *const libc::c_char,
                node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: b"sha224sum\0" as *const u8 as *const libc::c_char,
                node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: b"sha256sum\0" as *const u8 as *const libc::c_char,
                node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: b"sha384sum\0" as *const u8 as *const libc::c_char,
                node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: b"sha512sum\0" as *const u8 as *const libc::c_char,
                node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = infomap {
                program: 0 as *const libc::c_char,
                node: 0 as *const libc::c_char,
            };
            init
        },
    ];
    let mut node: *const libc::c_char = program;
    let mut map_prog: *const infomap = infomap_0.as_ptr();
    while !((*map_prog).program).is_null()
        && !(strcmp(program, (*map_prog).program) == 0 as libc::c_int)
    {
        map_prog = map_prog.offset(1);
    }
    if !((*map_prog).node).is_null() {
        node = (*map_prog).node;
    }
    printf(
        dcgettext(
            0 as *const libc::c_char,
            b"\n%s online help: <%s>\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
        b"GNU coreutils\0" as *const u8 as *const libc::c_char,
        b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    );
    let mut lc_messages: *const libc::c_char = setlocale(
        5 as libc::c_int,
        0 as *const libc::c_char,
    );
    if !lc_messages.is_null()
        && strncmp(
            lc_messages,
            b"en_\0" as *const u8 as *const libc::c_char,
            (::core::mem::size_of::<[libc::c_char; 4]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong),
        ) != 0
    {
        fputs_unlocked(
            dcgettext(
                0 as *const libc::c_char,
                b"Report any translation bugs to <https://translationproject.org/team/>\n\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            stdout,
        );
    }
    let mut url_program: *const libc::c_char = if strcmp(
        program,
        b"[\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {
        b"test\0" as *const u8 as *const libc::c_char
    } else {
        program
    };
    printf(
        dcgettext(
            0 as *const libc::c_char,
            b"Full documentation <%s%s>\n\0" as *const u8 as *const libc::c_char,
            5 as libc::c_int,
        ),
        b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
        url_program,
    );
    printf(
        dcgettext(
            0 as *const libc::c_char,
            b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8
                as *const libc::c_char,
            5 as libc::c_int,
        ),
        node,
        if node == program {
            b" invocation\0" as *const u8 as *const libc::c_char
        } else {
            b"\0" as *const u8 as *const libc::c_char
        },
    );
}
static mut G_line: [libc::c_char; 4808] = [
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'U' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'P' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '?' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    '[' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    ']' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    '[' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    ']' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    '*' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '8' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '8' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    '=' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'R' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '"' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    '"' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'D' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'L' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'M' as i32 as libc::c_char,
    'U' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'D' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'F' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'S' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'D' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'B' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'C' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'P' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'M' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'N' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'S' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'U' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'D' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'S' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'G' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'D' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'C' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'P' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'Y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'S' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    'Y' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'W' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'O' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'H' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'W' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'A' as i32 as libc::c_char,
    'B' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'S' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'K' as i32 as libc::c_char,
    'Y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    '+' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    'E' as i32 as libc::c_char,
    'X' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'P' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    '\'' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'D' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    ' ' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '(' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ')' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    '7' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'z' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    '2' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'q' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '1' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '5' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    '4' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ':' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'I' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'y' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'F' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    '_' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'x' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '3' as i32 as libc::c_char,
    '6' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '*' as i32 as libc::c_char,
    '~' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '*' as i32 as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'j' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'k' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    '-' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'w' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '.' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    ';' as i32 as libc::c_char,
    '9' as i32 as libc::c_char,
    '0' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'S' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'q' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'C' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'L' as i32 as libc::c_char,
    'O' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'T' as i32 as libc::c_char,
    'E' as i32 as libc::c_char,
    'R' as i32 as libc::c_char,
    'M' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    ',' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'u' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    '/' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'd' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
    '#' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'p' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'f' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    'c' as i32 as libc::c_char,
    'h' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'g' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'o' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    'm' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    'n' as i32 as libc::c_char,
    't' as i32 as libc::c_char,
    ' ' as i32 as libc::c_char,
    'v' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'r' as i32 as libc::c_char,
    'i' as i32 as libc::c_char,
    'a' as i32 as libc::c_char,
    'b' as i32 as libc::c_char,
    'l' as i32 as libc::c_char,
    'e' as i32 as libc::c_char,
    's' as i32 as libc::c_char,
    '.' as i32 as libc::c_char,
    0 as libc::c_int as libc::c_char,
];
static mut lsc_obstack: obstack = obstack {
    chunk_size: 0,
    chunk: 0 as *const _obstack_chunk as *mut _obstack_chunk,
    object_base: 0 as *const libc::c_char as *mut libc::c_char,
    next_free: 0 as *const libc::c_char as *mut libc::c_char,
    chunk_limit: 0 as *const libc::c_char as *mut libc::c_char,
    temp: C2RustUnnamed_2 { i: 0 },
    alignment_mask: 0,
    chunkfun: C2RustUnnamed_1 { plain: None },
    freefun: C2RustUnnamed_0 { plain: None },
    extra_arg: 0 as *const libc::c_void as *mut libc::c_void,
    use_extra_arg_maybe_empty_object_alloc_failed: [0; 1],
    c2rust_padding: [0; 7],
};
static mut slack_codes: [*const libc::c_char; 38] = [
    b"NORMAL\0" as *const u8 as *const libc::c_char,
    b"NORM\0" as *const u8 as *const libc::c_char,
    b"FILE\0" as *const u8 as *const libc::c_char,
    b"RESET\0" as *const u8 as *const libc::c_char,
    b"DIR\0" as *const u8 as *const libc::c_char,
    b"LNK\0" as *const u8 as *const libc::c_char,
    b"LINK\0" as *const u8 as *const libc::c_char,
    b"SYMLINK\0" as *const u8 as *const libc::c_char,
    b"ORPHAN\0" as *const u8 as *const libc::c_char,
    b"MISSING\0" as *const u8 as *const libc::c_char,
    b"FIFO\0" as *const u8 as *const libc::c_char,
    b"PIPE\0" as *const u8 as *const libc::c_char,
    b"SOCK\0" as *const u8 as *const libc::c_char,
    b"BLK\0" as *const u8 as *const libc::c_char,
    b"BLOCK\0" as *const u8 as *const libc::c_char,
    b"CHR\0" as *const u8 as *const libc::c_char,
    b"CHAR\0" as *const u8 as *const libc::c_char,
    b"DOOR\0" as *const u8 as *const libc::c_char,
    b"EXEC\0" as *const u8 as *const libc::c_char,
    b"LEFT\0" as *const u8 as *const libc::c_char,
    b"LEFTCODE\0" as *const u8 as *const libc::c_char,
    b"RIGHT\0" as *const u8 as *const libc::c_char,
    b"RIGHTCODE\0" as *const u8 as *const libc::c_char,
    b"END\0" as *const u8 as *const libc::c_char,
    b"ENDCODE\0" as *const u8 as *const libc::c_char,
    b"SUID\0" as *const u8 as *const libc::c_char,
    b"SETUID\0" as *const u8 as *const libc::c_char,
    b"SGID\0" as *const u8 as *const libc::c_char,
    b"SETGID\0" as *const u8 as *const libc::c_char,
    b"STICKY\0" as *const u8 as *const libc::c_char,
    b"OTHER_WRITABLE\0" as *const u8 as *const libc::c_char,
    b"OWR\0" as *const u8 as *const libc::c_char,
    b"STICKY_OTHER_WRITABLE\0" as *const u8 as *const libc::c_char,
    b"OWT\0" as *const u8 as *const libc::c_char,
    b"CAPABILITY\0" as *const u8 as *const libc::c_char,
    b"MULTIHARDLINK\0" as *const u8 as *const libc::c_char,
    b"CLRTOEOL\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
static mut ls_codes: [*const libc::c_char; 38] = [
    b"no\0" as *const u8 as *const libc::c_char,
    b"no\0" as *const u8 as *const libc::c_char,
    b"fi\0" as *const u8 as *const libc::c_char,
    b"rs\0" as *const u8 as *const libc::c_char,
    b"di\0" as *const u8 as *const libc::c_char,
    b"ln\0" as *const u8 as *const libc::c_char,
    b"ln\0" as *const u8 as *const libc::c_char,
    b"ln\0" as *const u8 as *const libc::c_char,
    b"or\0" as *const u8 as *const libc::c_char,
    b"mi\0" as *const u8 as *const libc::c_char,
    b"pi\0" as *const u8 as *const libc::c_char,
    b"pi\0" as *const u8 as *const libc::c_char,
    b"so\0" as *const u8 as *const libc::c_char,
    b"bd\0" as *const u8 as *const libc::c_char,
    b"bd\0" as *const u8 as *const libc::c_char,
    b"cd\0" as *const u8 as *const libc::c_char,
    b"cd\0" as *const u8 as *const libc::c_char,
    b"do\0" as *const u8 as *const libc::c_char,
    b"ex\0" as *const u8 as *const libc::c_char,
    b"lc\0" as *const u8 as *const libc::c_char,
    b"lc\0" as *const u8 as *const libc::c_char,
    b"rc\0" as *const u8 as *const libc::c_char,
    b"rc\0" as *const u8 as *const libc::c_char,
    b"ec\0" as *const u8 as *const libc::c_char,
    b"ec\0" as *const u8 as *const libc::c_char,
    b"su\0" as *const u8 as *const libc::c_char,
    b"su\0" as *const u8 as *const libc::c_char,
    b"sg\0" as *const u8 as *const libc::c_char,
    b"sg\0" as *const u8 as *const libc::c_char,
    b"st\0" as *const u8 as *const libc::c_char,
    b"ow\0" as *const u8 as *const libc::c_char,
    b"ow\0" as *const u8 as *const libc::c_char,
    b"tw\0" as *const u8 as *const libc::c_char,
    b"tw\0" as *const u8 as *const libc::c_char,
    b"ca\0" as *const u8 as *const libc::c_char,
    b"mh\0" as *const u8 as *const libc::c_char,
    b"cl\0" as *const u8 as *const libc::c_char,
    0 as *const libc::c_char,
];
static mut print_ls_colors: bool = false;
static mut long_options: [option; 9] = [
    {
        let mut init = option {
            name: b"bourne-shell\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 'b' as i32,
        };
        init
    },
    {
        let mut init = option {
            name: b"sh\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 'b' as i32,
        };
        init
    },
    {
        let mut init = option {
            name: b"csh\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 'c' as i32,
        };
        init
    },
    {
        let mut init = option {
            name: b"c-shell\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 'c' as i32,
        };
        init
    },
    {
        let mut init = option {
            name: b"print-database\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 'p' as i32,
        };
        init
    },
    {
        let mut init = option {
            name: b"print-ls-colors\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: PRINT_LS_COLORS_OPTION as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"help\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: GETOPT_HELP_CHAR as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: b"version\0" as *const u8 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: GETOPT_VERSION_CHAR as libc::c_int,
        };
        init
    },
    {
        let mut init = option {
            name: 0 as *const libc::c_char,
            has_arg: 0 as libc::c_int,
            flag: 0 as *const libc::c_int as *mut libc::c_int,
            val: 0 as libc::c_int,
        };
        init
    },
];
#[no_mangle]
pub unsafe extern "C" fn usage(mut status: libc::c_int) {
    if status != 0 as libc::c_int {
        fprintf(
            stderr,
            dcgettext(
                0 as *const libc::c_char,
                b"Try '%s --help' for more information.\n\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            program_name,
        );
    } else {
        printf(
            dcgettext(
                0 as *const libc::c_char,
                b"Usage: %s [OPTION]... [FILE]\n\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            program_name,
        );
        fputs_unlocked(
            dcgettext(
                0 as *const libc::c_char,
                b"Output commands to set the LS_COLORS environment variable.\n\nDetermine format of output:\n  -b, --sh, --bourne-shell    output Bourne shell code to set LS_COLORS\n  -c, --csh, --c-shell        output C shell code to set LS_COLORS\n  -p, --print-database        output defaults\n      --print-ls-colors       output fully escaped colors for display\n\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            stdout,
        );
        fputs_unlocked(
            dcgettext(
                0 as *const libc::c_char,
                b"      --help        display this help and exit\n\0" as *const u8
                    as *const libc::c_char,
                5 as libc::c_int,
            ),
            stdout,
        );
        fputs_unlocked(
            dcgettext(
                0 as *const libc::c_char,
                b"      --version     output version information and exit\n\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            stdout,
        );
        fputs_unlocked(
            dcgettext(
                0 as *const libc::c_char,
                b"\nIf FILE is specified, read it to determine which colors to use for which\nfile types and extensions.  Otherwise, a precompiled database is used.\nFor details on the format of these files, run 'dircolors --print-database'.\n\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            stdout,
        );
        emit_ancillary_info(b"dircolors\0" as *const u8 as *const libc::c_char);
    }
    exit(status);
}
unsafe extern "C" fn guess_shell_syntax() -> Shell_syntax {
    let mut shell: *mut libc::c_char = 0 as *mut libc::c_char;
    shell = getenv(b"SHELL\0" as *const u8 as *const libc::c_char);
    if shell.is_null() || *shell as libc::c_int == '\0' as i32 {
        return SHELL_SYNTAX_UNKNOWN;
    }
    shell = last_component(shell);
    if strcmp(shell, b"csh\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
        || strcmp(shell, b"tcsh\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
    {
        return SHELL_SYNTAX_C;
    }
    return SHELL_SYNTAX_BOURNE;
}
unsafe extern "C" fn parse_line(
    mut line: *const libc::c_char,
    mut keyword: *mut *mut libc::c_char,
    mut arg: *mut *mut libc::c_char,
) {
    let mut p: *const libc::c_char = 0 as *const libc::c_char;
    let mut keyword_start: *const libc::c_char = 0 as *const libc::c_char;
    let mut arg_start: *const libc::c_char = 0 as *const libc::c_char;
    *keyword = 0 as *mut libc::c_char;
    *arg = 0 as *mut libc::c_char;
    p = line;
    while *(*__ctype_b_loc()).offset(to_uchar(*p) as libc::c_int as isize) as libc::c_int
        & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    {
        p = p.offset(1);
    }
    if *p as libc::c_int == '\0' as i32 || *p as libc::c_int == '#' as i32 {
        return;
    }
    keyword_start = p;
    while *(*__ctype_b_loc()).offset(to_uchar(*p) as libc::c_int as isize) as libc::c_int
        & _ISspace as libc::c_int as libc::c_ushort as libc::c_int == 0
        && *p as libc::c_int != '\0' as i32
    {
        p = p.offset(1);
    }
    *keyword = ximemdup0(
        keyword_start as *const libc::c_void,
        p.offset_from(keyword_start) as libc::c_long,
    );
    if *p as libc::c_int == '\0' as i32 {
        return;
    }
    loop {
        p = p.offset(1);
        if !(*(*__ctype_b_loc()).offset(to_uchar(*p) as libc::c_int as isize)
            as libc::c_int & _ISspace as libc::c_int as libc::c_ushort as libc::c_int
            != 0)
        {
            break;
        }
    }
    if *p as libc::c_int == '\0' as i32 || *p as libc::c_int == '#' as i32 {
        return;
    }
    arg_start = p;
    while *p as libc::c_int != '\0' as i32 && *p as libc::c_int != '#' as i32 {
        p = p.offset(1);
    }
    p = p.offset(-1);
    while *(*__ctype_b_loc()).offset(to_uchar(*p) as libc::c_int as isize) as libc::c_int
        & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    {
        p = p.offset(-1);
    }
    p = p.offset(1);
    *arg = ximemdup0(
        arg_start as *const libc::c_void,
        p.offset_from(arg_start) as libc::c_long,
    );
}
unsafe extern "C" fn append_quoted(mut str: *const libc::c_char) {
    let mut need_backslash: bool = 1 as libc::c_int != 0;
    while *str as libc::c_int != '\0' as i32 {
        if !print_ls_colors {
            let mut current_block_24: u64;
            match *str as libc::c_int {
                39 => {
                    let mut __o: *mut obstack = &mut lsc_obstack;
                    if ({
                        let mut __o1: *const obstack = __o;
                        ((*__o1).chunk_limit).offset_from((*__o1).next_free)
                            as libc::c_long as size_t
                    }) < 1 as libc::c_int as libc::c_ulong
                    {
                        _obstack_newchunk(__o, 1 as libc::c_int as size_t);
                    }
                    let fresh1 = (*__o).next_free;
                    (*__o).next_free = ((*__o).next_free).offset(1);
                    *fresh1 = '\'' as i32 as libc::c_char;
                    let mut __o_0: *mut obstack = &mut lsc_obstack;
                    if ({
                        let mut __o1: *const obstack = __o_0;
                        ((*__o1).chunk_limit).offset_from((*__o1).next_free)
                            as libc::c_long as size_t
                    }) < 1 as libc::c_int as libc::c_ulong
                    {
                        _obstack_newchunk(__o_0, 1 as libc::c_int as size_t);
                    }
                    let fresh2 = (*__o_0).next_free;
                    (*__o_0).next_free = ((*__o_0).next_free).offset(1);
                    *fresh2 = '\\' as i32 as libc::c_char;
                    let mut __o_1: *mut obstack = &mut lsc_obstack;
                    if ({
                        let mut __o1: *const obstack = __o_1;
                        ((*__o1).chunk_limit).offset_from((*__o1).next_free)
                            as libc::c_long as size_t
                    }) < 1 as libc::c_int as libc::c_ulong
                    {
                        _obstack_newchunk(__o_1, 1 as libc::c_int as size_t);
                    }
                    let fresh3 = (*__o_1).next_free;
                    (*__o_1).next_free = ((*__o_1).next_free).offset(1);
                    *fresh3 = '\'' as i32 as libc::c_char;
                    need_backslash = 1 as libc::c_int != 0;
                    current_block_24 = 6669252993407410313;
                }
                92 | 94 => {
                    need_backslash = !need_backslash;
                    current_block_24 = 6669252993407410313;
                }
                58 | 61 => {
                    if need_backslash {
                        let mut __o_2: *mut obstack = &mut lsc_obstack;
                        if ({
                            let mut __o1: *const obstack = __o_2;
                            ((*__o1).chunk_limit).offset_from((*__o1).next_free)
                                as libc::c_long as size_t
                        }) < 1 as libc::c_int as libc::c_ulong
                        {
                            _obstack_newchunk(__o_2, 1 as libc::c_int as size_t);
                        }
                        let fresh4 = (*__o_2).next_free;
                        (*__o_2).next_free = ((*__o_2).next_free).offset(1);
                        *fresh4 = '\\' as i32 as libc::c_char;
                    }
                    current_block_24 = 12437161245947919212;
                }
                _ => {
                    current_block_24 = 12437161245947919212;
                }
            }
            match current_block_24 {
                12437161245947919212 => {
                    need_backslash = 1 as libc::c_int != 0;
                }
                _ => {}
            }
        }
        let mut __o_3: *mut obstack = &mut lsc_obstack;
        if ({
            let mut __o1: *const obstack = __o_3;
            ((*__o1).chunk_limit).offset_from((*__o1).next_free) as libc::c_long
                as size_t
        }) < 1 as libc::c_int as libc::c_ulong
        {
            _obstack_newchunk(__o_3, 1 as libc::c_int as size_t);
        }
        let fresh5 = (*__o_3).next_free;
        (*__o_3).next_free = ((*__o_3).next_free).offset(1);
        *fresh5 = *str;
        str = str.offset(1);
    }
}
unsafe extern "C" fn append_entry(
    mut prefix: libc::c_char,
    mut item: *const libc::c_char,
    mut arg: *const libc::c_char,
) {
    if print_ls_colors {
        append_quoted(b"\x1B[\0" as *const u8 as *const libc::c_char);
        append_quoted(arg);
        let mut __o: *mut obstack = &mut lsc_obstack;
        if ({
            let mut __o1: *const obstack = __o;
            ((*__o1).chunk_limit).offset_from((*__o1).next_free) as libc::c_long
                as size_t
        }) < 1 as libc::c_int as libc::c_ulong
        {
            _obstack_newchunk(__o, 1 as libc::c_int as size_t);
        }
        let fresh6 = (*__o).next_free;
        (*__o).next_free = ((*__o).next_free).offset(1);
        *fresh6 = 'm' as i32 as libc::c_char;
    }
    if prefix != 0 {
        let mut __o_0: *mut obstack = &mut lsc_obstack;
        if ({
            let mut __o1: *const obstack = __o_0;
            ((*__o1).chunk_limit).offset_from((*__o1).next_free) as libc::c_long
                as size_t
        }) < 1 as libc::c_int as libc::c_ulong
        {
            _obstack_newchunk(__o_0, 1 as libc::c_int as size_t);
        }
        let fresh7 = (*__o_0).next_free;
        (*__o_0).next_free = ((*__o_0).next_free).offset(1);
        *fresh7 = prefix;
    }
    append_quoted(item);
    let mut __o_1: *mut obstack = &mut lsc_obstack;
    if ({
        let mut __o1: *const obstack = __o_1;
        ((*__o1).chunk_limit).offset_from((*__o1).next_free) as libc::c_long as size_t
    }) < 1 as libc::c_int as libc::c_ulong
    {
        _obstack_newchunk(__o_1, 1 as libc::c_int as size_t);
    }
    let fresh8 = (*__o_1).next_free;
    (*__o_1).next_free = ((*__o_1).next_free).offset(1);
    *fresh8 = (if print_ls_colors as libc::c_int != 0 {
        '\t' as i32
    } else {
        '=' as i32
    }) as libc::c_char;
    append_quoted(arg);
    if print_ls_colors {
        append_quoted(b"\x1B[0m\0" as *const u8 as *const libc::c_char);
    }
    let mut __o_2: *mut obstack = &mut lsc_obstack;
    if ({
        let mut __o1: *const obstack = __o_2;
        ((*__o1).chunk_limit).offset_from((*__o1).next_free) as libc::c_long as size_t
    }) < 1 as libc::c_int as libc::c_ulong
    {
        _obstack_newchunk(__o_2, 1 as libc::c_int as size_t);
    }
    let fresh9 = (*__o_2).next_free;
    (*__o_2).next_free = ((*__o_2).next_free).offset(1);
    *fresh9 = (if print_ls_colors as libc::c_int != 0 {
        '\n' as i32
    } else {
        ':' as i32
    }) as libc::c_char;
}
unsafe extern "C" fn dc_parse_stream(
    mut fp: *mut FILE,
    mut filename: *const libc::c_char,
) -> bool {
    let mut line_number: size_t = 0 as libc::c_int as size_t;
    let mut next_G_line: *const libc::c_char = G_line.as_ptr();
    let mut input_line: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut input_line_size: size_t = 0 as libc::c_int as size_t;
    let mut line: *const libc::c_char = 0 as *const libc::c_char;
    let mut term: *const libc::c_char = 0 as *const libc::c_char;
    let mut colorterm: *const libc::c_char = 0 as *const libc::c_char;
    let mut ok: bool = 1 as libc::c_int != 0;
    let mut state: C2RustUnnamed_5 = ST_GLOBAL;
    term = getenv(b"TERM\0" as *const u8 as *const libc::c_char);
    if term.is_null() || *term as libc::c_int == '\0' as i32 {
        term = b"none\0" as *const u8 as *const libc::c_char;
    }
    colorterm = getenv(b"COLORTERM\0" as *const u8 as *const libc::c_char);
    if colorterm.is_null() {
        colorterm = b"\0" as *const u8 as *const libc::c_char;
    }
    loop {
        let mut keywd: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut arg: *mut libc::c_char = 0 as *mut libc::c_char;
        let mut unrecognized: bool = false;
        line_number = line_number.wrapping_add(1);
        if !fp.is_null() {
            if getline(&mut input_line, &mut input_line_size, fp)
                <= 0 as libc::c_int as libc::c_long
            {
                free(input_line as *mut libc::c_void);
                break;
            } else {
                line = input_line;
            }
        } else {
            if next_G_line
                == G_line
                    .as_ptr()
                    .offset(
                        ::core::mem::size_of::<[libc::c_char; 4808]>() as libc::c_ulong
                            as isize,
                    )
            {
                break;
            }
            line = next_G_line;
            next_G_line = next_G_line
                .offset(
                    (strlen(next_G_line)).wrapping_add(1 as libc::c_int as libc::c_ulong)
                        as isize,
                );
        }
        parse_line(line, &mut keywd, &mut arg);
        if keywd.is_null() {
            continue;
        }
        if arg.is_null() {
            error(
                0 as libc::c_int,
                0 as libc::c_int,
                dcgettext(
                    0 as *const libc::c_char,
                    b"%s:%lu: invalid line;  missing second token\0" as *const u8
                        as *const libc::c_char,
                    5 as libc::c_int,
                ),
                quotearg_n_style_colon(
                    0 as libc::c_int,
                    shell_escape_quoting_style,
                    filename,
                ),
                line_number,
            );
            ok = 0 as libc::c_int != 0;
            free(keywd as *mut libc::c_void);
        } else {
            unrecognized = 0 as libc::c_int != 0;
            if c_strcasecmp(keywd, b"TERM\0" as *const u8 as *const libc::c_char)
                == 0 as libc::c_int
            {
                if state as libc::c_uint != ST_TERMSURE as libc::c_int as libc::c_uint {
                    state = (if fnmatch(arg, term, 0 as libc::c_int) == 0 as libc::c_int
                    {
                        ST_TERMSURE as libc::c_int
                    } else {
                        ST_TERMNO as libc::c_int
                    }) as C2RustUnnamed_5;
                }
            } else if c_strcasecmp(
                keywd,
                b"COLORTERM\0" as *const u8 as *const libc::c_char,
            ) == 0 as libc::c_int
            {
                if state as libc::c_uint != ST_TERMSURE as libc::c_int as libc::c_uint {
                    state = (if fnmatch(arg, colorterm, 0 as libc::c_int)
                        == 0 as libc::c_int
                    {
                        ST_TERMSURE as libc::c_int
                    } else {
                        ST_TERMNO as libc::c_int
                    }) as C2RustUnnamed_5;
                }
            } else {
                if state as libc::c_uint == ST_TERMSURE as libc::c_int as libc::c_uint {
                    state = ST_TERMYES;
                }
                if state as libc::c_uint != ST_TERMNO as libc::c_int as libc::c_uint {
                    if *keywd.offset(0 as libc::c_int as isize) as libc::c_int
                        == '.' as i32
                    {
                        append_entry('*' as i32 as libc::c_char, keywd, arg);
                    } else if *keywd.offset(0 as libc::c_int as isize) as libc::c_int
                        == '*' as i32
                    {
                        append_entry(0 as libc::c_int as libc::c_char, keywd, arg);
                    } else if !(c_strcasecmp(
                        keywd,
                        b"OPTIONS\0" as *const u8 as *const libc::c_char,
                    ) == 0 as libc::c_int
                        || c_strcasecmp(
                            keywd,
                            b"COLOR\0" as *const u8 as *const libc::c_char,
                        ) == 0 as libc::c_int
                        || c_strcasecmp(
                            keywd,
                            b"EIGHTBIT\0" as *const u8 as *const libc::c_char,
                        ) == 0 as libc::c_int)
                    {
                        let mut i: libc::c_int = 0;
                        i = 0 as libc::c_int;
                        while !(slack_codes[i as usize]).is_null() {
                            if c_strcasecmp(keywd, slack_codes[i as usize])
                                == 0 as libc::c_int
                            {
                                break;
                            }
                            i += 1;
                        }
                        if !(slack_codes[i as usize]).is_null() {
                            append_entry(
                                0 as libc::c_int as libc::c_char,
                                ls_codes[i as usize],
                                arg,
                            );
                        } else {
                            unrecognized = 1 as libc::c_int != 0;
                        }
                    }
                } else {
                    unrecognized = 1 as libc::c_int != 0;
                }
            }
            if unrecognized as libc::c_int != 0
                && (state as libc::c_uint == ST_TERMSURE as libc::c_int as libc::c_uint
                    || state as libc::c_uint
                        == ST_TERMYES as libc::c_int as libc::c_uint)
            {
                error(
                    0 as libc::c_int,
                    0 as libc::c_int,
                    dcgettext(
                        0 as *const libc::c_char,
                        b"%s:%lu: unrecognized keyword %s\0" as *const u8
                            as *const libc::c_char,
                        5 as libc::c_int,
                    ),
                    if !filename.is_null() {
                        quotearg_n_style_colon(
                            0 as libc::c_int,
                            shell_escape_quoting_style,
                            filename,
                        )
                    } else {
                        dcgettext(
                            0 as *const libc::c_char,
                            b"<internal>\0" as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        )
                    },
                    line_number,
                    keywd,
                );
                ok = 0 as libc::c_int != 0;
            }
            free(keywd as *mut libc::c_void);
            free(arg as *mut libc::c_void);
        }
    }
    return ok;
}
unsafe extern "C" fn dc_parse_file(mut filename: *const libc::c_char) -> bool {
    let mut ok: bool = false;
    if !(strcmp(filename, b"-\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int)
        && (freopen_safer(filename, b"r\0" as *const u8 as *const libc::c_char, stdin))
            .is_null()
    {
        error(
            0 as libc::c_int,
            *__errno_location(),
            b"%s\0" as *const u8 as *const libc::c_char,
            quotearg_n_style_colon(
                0 as libc::c_int,
                shell_escape_quoting_style,
                filename,
            ),
        );
        return 0 as libc::c_int != 0;
    }
    ok = dc_parse_stream(stdin, filename);
    if rpl_fclose(stdin) != 0 as libc::c_int {
        error(
            0 as libc::c_int,
            *__errno_location(),
            b"%s\0" as *const u8 as *const libc::c_char,
            quotearg_n_style_colon(
                0 as libc::c_int,
                shell_escape_quoting_style,
                filename,
            ),
        );
        return 0 as libc::c_int != 0;
    }
    return ok;
}
unsafe fn main_0(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut ok: bool = 1 as libc::c_int != 0;
    let mut optc: libc::c_int = 0;
    let mut syntax: Shell_syntax = SHELL_SYNTAX_UNKNOWN;
    let mut print_database: bool = 0 as libc::c_int != 0;
    set_program_name(*argv.offset(0 as libc::c_int as isize));
    setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
    bindtextdomain(
        b"coreutils\0" as *const u8 as *const libc::c_char,
        b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
    );
    textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
    atexit(Some(close_stdout as unsafe extern "C" fn() -> ()));
    loop {
        optc = getopt_long(
            argc,
            argv,
            b"bcp\0" as *const u8 as *const libc::c_char,
            long_options.as_ptr(),
            0 as *mut libc::c_int,
        );
        if !(optc != -(1 as libc::c_int)) {
            break;
        }
        match optc {
            98 => {
                syntax = SHELL_SYNTAX_BOURNE;
            }
            99 => {
                syntax = SHELL_SYNTAX_C;
            }
            112 => {
                print_database = 1 as libc::c_int != 0;
            }
            256 => {
                print_ls_colors = 1 as libc::c_int != 0;
            }
            -2 => {
                usage(0 as libc::c_int);
            }
            -3 => {
                version_etc(
                    stdout,
                    b"dircolors\0" as *const u8 as *const libc::c_char,
                    b"GNU coreutils\0" as *const u8 as *const libc::c_char,
                    Version,
                    b"H. Peter Anvin\0" as *const u8 as *const libc::c_char,
                    0 as *mut libc::c_void as *mut libc::c_char,
                );
                exit(0 as libc::c_int);
            }
            _ => {
                usage(1 as libc::c_int);
            }
        }
    }
    argc -= optind;
    argv = argv.offset(optind as isize);
    if print_database as libc::c_int | print_ls_colors as libc::c_int != 0
        && syntax as libc::c_uint != SHELL_SYNTAX_UNKNOWN as libc::c_int as libc::c_uint
    {
        error(
            0 as libc::c_int,
            0 as libc::c_int,
            dcgettext(
                0 as *const libc::c_char,
                b"the options to output non shell syntax,\nand to select a shell syntax are mutually exclusive\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        usage(1 as libc::c_int);
    }
    if print_database as libc::c_int != 0 && print_ls_colors as libc::c_int != 0 {
        error(
            0 as libc::c_int,
            0 as libc::c_int,
            dcgettext(
                0 as *const libc::c_char,
                b"options --print-database and --print-ls-colors are mutually exclusive\0"
                    as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
        );
        usage(1 as libc::c_int);
    }
    if (!print_database as libc::c_int) < argc {
        error(
            0 as libc::c_int,
            0 as libc::c_int,
            dcgettext(
                0 as *const libc::c_char,
                b"extra operand %s\0" as *const u8 as *const libc::c_char,
                5 as libc::c_int,
            ),
            quote(*argv.offset(!print_database as libc::c_int as isize)),
        );
        if print_database {
            fprintf(
                stderr,
                b"%s\n\0" as *const u8 as *const libc::c_char,
                dcgettext(
                    0 as *const libc::c_char,
                    b"file operands cannot be combined with --print-database (-p)\0"
                        as *const u8 as *const libc::c_char,
                    5 as libc::c_int,
                ),
            );
        }
        usage(1 as libc::c_int);
    }
    if print_database {
        let mut p: *const libc::c_char = G_line.as_ptr();
        while (p.offset_from(G_line.as_ptr()) as libc::c_long as libc::c_ulong)
            < ::core::mem::size_of::<[libc::c_char; 4808]>() as libc::c_ulong
        {
            puts(p);
            p = p
                .offset(
                    (strlen(p)).wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    } else {
        if syntax as libc::c_uint == SHELL_SYNTAX_UNKNOWN as libc::c_int as libc::c_uint
            && !print_ls_colors
        {
            syntax = guess_shell_syntax();
            if syntax as libc::c_uint
                == SHELL_SYNTAX_UNKNOWN as libc::c_int as libc::c_uint
            {
                if ::core::mem::size_of::<C2RustUnnamed_6>() as libc::c_ulong != 0 {
                    error(
                        1 as libc::c_int,
                        0 as libc::c_int,
                        dcgettext(
                            0 as *const libc::c_char,
                            b"no SHELL environment variable, and no shell type option given\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                    if 0 as libc::c_int != 0 {} else {
                        unreachable!();
                    };
                } else {
                    error(
                        1 as libc::c_int,
                        0 as libc::c_int,
                        dcgettext(
                            0 as *const libc::c_char,
                            b"no SHELL environment variable, and no shell type option given\0"
                                as *const u8 as *const libc::c_char,
                            5 as libc::c_int,
                        ),
                    );
                    if 0 as libc::c_int != 0 {} else {
                        unreachable!();
                    };
                };
            }
        }
        _obstack_begin(
            &mut lsc_obstack,
            0 as libc::c_int as size_t,
            0 as libc::c_int as size_t,
            Some(malloc as unsafe extern "C" fn(libc::c_ulong) -> *mut libc::c_void),
            Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ()),
        );
        if argc == 0 as libc::c_int {
            ok = dc_parse_stream(0 as *mut FILE, 0 as *const libc::c_char);
        } else {
            ok = dc_parse_file(*argv.offset(0 as libc::c_int as isize));
        }
        if ok {
            let mut len: size_t = ({
                let mut __o: *const obstack = &mut lsc_obstack;
                ((*__o).next_free).offset_from((*__o).object_base) as libc::c_long
                    as size_t
            });
            let mut s: *mut libc::c_char = ({
                let mut __o1: *mut obstack = &mut lsc_obstack as *mut obstack;
                let mut __value: *mut libc::c_void = (*__o1).object_base
                    as *mut libc::c_void;
                if (*__o1).next_free == __value as *mut libc::c_char {
                    (*__o1).set_maybe_empty_object(1 as libc::c_int as libc::c_uint);
                }
                (*__o1)
                    .next_free = (if (::core::mem::size_of::<ptrdiff_t>()
                    as libc::c_ulong)
                    < ::core::mem::size_of::<*mut libc::c_void>() as libc::c_ulong
                {
                    (*__o1).object_base
                } else {
                    0 as *mut libc::c_char
                })
                    .offset(
                        ((((*__o1).next_free)
                            .offset_from(
                                (if (::core::mem::size_of::<ptrdiff_t>() as libc::c_ulong)
                                    < ::core::mem::size_of::<*mut libc::c_void>()
                                        as libc::c_ulong
                                {
                                    (*__o1).object_base
                                } else {
                                    0 as *mut libc::c_char
                                }),
                            ) as libc::c_long as libc::c_ulong)
                            .wrapping_add((*__o1).alignment_mask)
                            & !(*__o1).alignment_mask) as isize,
                    );
                if ((*__o1).next_free).offset_from((*__o1).chunk as *mut libc::c_char)
                    as libc::c_long as size_t
                    > ((*__o1).chunk_limit)
                        .offset_from((*__o1).chunk as *mut libc::c_char) as libc::c_long
                        as size_t
                {
                    (*__o1).next_free = (*__o1).chunk_limit;
                }
                (*__o1).object_base = (*__o1).next_free;
                __value
            }) as *mut libc::c_char;
            let mut prefix: *const libc::c_char = 0 as *const libc::c_char;
            let mut suffix: *const libc::c_char = 0 as *const libc::c_char;
            if syntax as libc::c_uint
                == SHELL_SYNTAX_BOURNE as libc::c_int as libc::c_uint
            {
                prefix = b"LS_COLORS='\0" as *const u8 as *const libc::c_char;
                suffix = b"';\nexport LS_COLORS\n\0" as *const u8 as *const libc::c_char;
            } else {
                prefix = b"setenv LS_COLORS '\0" as *const u8 as *const libc::c_char;
                suffix = b"'\n\0" as *const u8 as *const libc::c_char;
            }
            if !print_ls_colors {
                fputs_unlocked(prefix, stdout);
            }
            if 0 != 0 && 0 != 0
                && (1 as libc::c_int as size_t).wrapping_mul(len)
                    <= 8 as libc::c_int as libc::c_ulong
                && 1 as libc::c_int as size_t != 0 as libc::c_int as libc::c_ulong
            {
                ({
                    let mut __ptr: *const libc::c_char = s as *const libc::c_char;
                    let mut __stream: *mut FILE = stdout;
                    let mut __cnt: size_t = 0;
                    __cnt = (1 as libc::c_int as size_t).wrapping_mul(len);
                    while __cnt > 0 as libc::c_int as libc::c_ulong {
                        let fresh10 = __ptr;
                        __ptr = __ptr.offset(1);
                        if putc_unlocked(*fresh10 as libc::c_int, __stream)
                            == -(1 as libc::c_int)
                        {
                            break;
                        }
                        __cnt = __cnt.wrapping_sub(1);
                    }
                    compile_error!("Binary expression is not supposed to be used")
                });
            } else {
                if 0 != 0
                    && 1 as libc::c_int as size_t == 0 as libc::c_int as libc::c_ulong
                    || 0 != 0 && len == 0 as libc::c_int as libc::c_ulong
                {} else {
                    fwrite_unlocked(
                        s as *const libc::c_void,
                        1 as libc::c_int as size_t,
                        len,
                        stdout,
                    );
                };
            };
            if !print_ls_colors {
                fputs_unlocked(suffix, stdout);
            }
        }
    }
    return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
}
pub fn main() {
    let mut args: Vec::<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args() {
        args.push(
            (::std::ffi::CString::new(arg))
                .expect("Failed to convert argument into CString.")
                .into_raw(),
        );
    }
    args.push(::core::ptr::null_mut());
    unsafe {
        ::std::process::exit(
            main_0(
                (args.len() - 1) as libc::c_int,
                args.as_mut_ptr() as *mut *mut libc::c_char,
            ) as i32,
        )
    }
}
